#!/usr/bin/env emacs --script
(dolist (arg command-line-args-left) (message arg))

;; Write this code in a file: a+b.el
;; Put input.txt in the same directory than a+b.el
;; Open a+b.el in emacs and run the program with: M-x eval-buffer
(defun solve (xs) (mapcar (lambda (ys) (apply '+ ys)) xs))
 
(with-temp-buffer
  (insert-file-contents "input.txt")
  (setq content (split-string (buffer-string) "\n" t))
  (setq xs (mapcar (lambda (zs) (mapcar #'string-to-number (split-string zs))) content))
  (delete-other-windows)
  (find-file-other-window "output.txt")
  (erase-buffer)
  (insert (mapconcat (lambda (x) (format "%d" x)) (solve xs) "\n"))
  (save-buffer))


; concat vectors
(vconcat '[1 2 3] '[4 5] '[6 7 8 9])

; vector length
(length ["apple" "orange"])

; shell stuff
(shell-command "touch output.txt & mkdir docs")
(cd "~/")
(shell-command "touch output.txt & mkdir docs")

; math functions built in for emacs lisp
(setq x '[2 4 4 4 5 5 7 9])
(string-to-number (calc-eval (format "sqrt(vpvar(%s))" x)))

(defun dot-product (v1 v2)
  (setq res 0)
  (dotimes (i (length v1))
    (setq res (+ (* (elt v1 i) (elt v2 i) ) res) ))
  res)
 
(progn
  (insert (format "%d\n" (dot-product [1 2 3] [1 2 3]) ))    ; 14
  (insert (format "%d\n" (dot-product '(1 2 3) '(1 2 3) )))) ; 14
