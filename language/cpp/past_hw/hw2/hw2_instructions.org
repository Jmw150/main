TO DO LIST -*- mode: org -*- 

Dana_Vrajitoru
C243_Data_Structures
=======================================================================
                        ***** Homework 2 *****
Due date: Wednesday, September 6, 2017 (for review, else sep 11).
Ex. 1. 

* get assignemnt
Download the following files into a folder especially created for
this assignment (don't mix them with the previous homework):
Makefile
main.cc
List.cc
List.h
ListIterator.cc
ListIterator.h
ListNode.cc
ListNode.h
interface.cc
interface.h
general.cc
general.h
If you ssh into your Linux account, you can copy all the files (the whole
folder) with the command
cp /home/danav/public_html/teach/c243/p2 ./ -R
Compile the project with the command "make" and run the program with the
command "testlist" or "./testlist". Note that not all the options in this
program are working yet because you will need to supply the code for some of
the functions.

* internals
** supply the code for 8 functions in the class List 
   The prototypes for the functions to be written for the class List 
   are preceded by the comment "Functions to be written by the 
   student" and their implementation contains the comment "Code to 
   be supplied by the student."
** supply the code for 2 functions in the class ListIterator ||done||
*** The first function you must write for the ListIterator class is 
    the one finding the location of the minimal number in the list 
    pointed to by the current pointer of the target object. This 
    should not change the content of the target object. The 
    function returns a ListIterator object that contains the pointer 
    to that node, or NULL if the list was empty. This is the last 
    entry both in the header file and the source file for the 
    ListIterator class. 
*** The second function in the class ListIterator moves forward by a 
    number of steps. It is a repetition of the ++ operation for a 
    given number of steps.

* Modify the interface with the following changes:
** Add an option (16) to compute the sum of all the numbers in the ||done||
   list.
** Add an option (17) returning the element at a given position in ||done||
   the first list (which will need to be input from the user) and 
   printing it out. If the list is shorter than required, then print 
   a message telling the user that there is no element at that 
   position in the list.
** Replace the call to the bubble sort with a call to the ||done||
   selection sort for option 14.
** Add an option to locate a number in the first list. The number ||done||
   will have to be input from the user.
** If there is a homework function for which we don't have a test in ||done||
   the interface, feel free to add one after option 17.
* Notes.
** To add an option to the interface, you need to change the function 
   printing the menu, the function executing the menu, and a 
   constant (!).
** Upload all the files that you modify as attachments to 
   Assignments, Homework 2 in Canvas, meaning at least "List.cc", 
   "ListIterator.cc", and "interface.cc". If for some reason that 
   doesn't work, you can send them as attachments to a message on 
   Oncourse or to the syllabus email (that email is at iusb.edu, 
   not at cs.iusb.edu).
